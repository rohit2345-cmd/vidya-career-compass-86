
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, MessageSquare, Download, ArrowLeft } from "lucide-react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { getAIResponse } from "@/services/openRouterService";

interface OpenEndedResult {
  id: string;
  student_name: string;
  assessment_type: string;
  questions: Array<{
    questionId: string;
    question: string;
    answer: string;
  }>;
  completed_on: string;
}

const OpenEndedResults = () => {
  const { resultId } = useParams();
  const navigate = useNavigate();
  const [result, setResult] = useState<OpenEndedResult | null>(null);
  const [analysis, setAnalysis] = useState<string>("");
  const [isLoading, setIsLoading] = useState(true);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  useEffect(() => {
    if (resultId) {
      fetchResult();
    }
  }, [resultId]);

  const fetchResult = async () => {
    try {
      const { data, error } = await supabase
        .from('assessment_results')
        .select('*')
        .eq('id', resultId)
        .single();

      if (error) {
        console.error("Error fetching result:", error);
        toast.error("Failed to load assessment results");
        navigate("/assessments");
        return;
      }

      // Type cast the data to match our interface
      const typedResult: OpenEndedResult = {
        id: data.id,
        student_name: data.student_name,
        assessment_type: data.assessment_type,
        questions: Array.isArray(data.questions) ? data.questions : [],
        completed_on: data.completed_on
      };

      setResult(typedResult);
      // Automatically generate analysis
      generateAnalysis(typedResult);
    } catch (error) {
      console.error("Error fetching result:", error);
      toast.error("An error occurred while loading results");
      navigate("/assessments");
    } finally {
      setIsLoading(false);
    }
  };

  const generateAnalysis = async (assessmentData: OpenEndedResult) => {
    setIsAnalyzing(true);
    try {
      console.log("Generating analysis for open-ended assessment:", assessmentData);

      // Format the assessment data for the AI
      const formattedData = {
        studentName: assessmentData.student_name,
        assessmentType: assessmentData.assessment_type,
        questions: assessmentData.questions,
        completedOn: assessmentData.completed_on
      };

      // Create a detailed prompt for the AI based on the open-ended responses
      const analysisPrompt = `
Please analyze this student's open-ended career assessment responses and provide comprehensive career guidance:

Student: ${assessmentData.student_name}
Assessment Type: ${assessmentData.assessment_type}
Completed: ${new Date(assessmentData.completed_on).toLocaleDateString()}

STUDENT RESPONSES:
${assessmentData.questions.map((q, index) => 
  `${index + 1}. ${q.question}\nAnswer: ${q.answer}\n`
).join('\n')}

Based on these detailed responses, please provide:
1. A summary of the student's key interests, strengths, and values
2. Recommended career streams (Science/Commerce/Arts) with justification
3. 3-5 specific career field recommendations that align with their responses
4. Actionable next steps for skill development and exploration
5. Educational path recommendations for India

Keep the response structured, practical, and encouraging while being specific to the Indian education system.
      `;

      const messages = [
        { role: "user" as const, content: analysisPrompt }
      ];

      const aiAnalysis = await getAIResponse(messages, formattedData);
      setAnalysis(aiAnalysis);
      
      console.log("AI analysis generated successfully");
      toast.success("Career analysis generated successfully!");
    } catch (error) {
      console.error("Error generating analysis:", error);
      toast.error("Failed to generate career analysis. Please try again.");
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleRetryAnalysis = () => {
    if (result) {
      generateAnalysis(result);
    }
  };

  const handleDownloadReport = () => {
    if (!result || !analysis) {
      toast.error("No analysis available to download");
      return;
    }

    const reportContent = `
CAREER ASSESSMENT REPORT
========================

Student: ${result.student_name}
Assessment Type: ${result.assessment_type}
Date: ${new Date(result.completed_on).toLocaleDateString()}

RESPONSES:
${result.questions.map((q, index) => 
  `${index + 1}. ${q.question}\n   Answer: ${q.answer}\n`
).join('\n')}

CAREER ANALYSIS:
${analysis}

Generated by CareerPath AI
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `career-assessment-${result.student_name}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success("Report downloaded successfully!");
  };

  const handleStartChat = () => {
    // Navigate to AI counselor with the assessment results
    navigate('/ai-counselor', { 
      state: { 
        assessmentResults: result,
        analysisContext: analysis 
      } 
    });
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="flex items-center justify-center p-8">
            <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
            <span className="ml-2 text-lg">Loading assessment results...</span>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="text-center p-8">
            <h2 className="text-xl font-semibold mb-4">Assessment Not Found</h2>
            <p className="text-gray-600 mb-4">The requested assessment results could not be found.</p>
            <Button onClick={() => navigate("/assessments")} className="w-full">
              Back to Assessments
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 py-8">
      <div className="container max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              onClick={() => navigate("/assessments")}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              Back to Assessments
            </Button>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                Career Assessment Results
              </h1>
              <p className="text-gray-600">
                {result.student_name} â€¢ {new Date(result.completed_on).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>

        {/* Student Responses */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              Assessment Responses
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {result.questions.map((q, index) => (
                <div key={index} className="border-l-4 border-blue-200 pl-4">
                  <h3 className="font-medium text-gray-900 mb-2">
                    {index + 1}. {q.question}
                  </h3>
                  <p className="text-gray-700 bg-gray-50 p-3 rounded-md">
                    {q.answer}
                  </p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* AI Analysis */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5" />
                Career Analysis & Recommendations
              </span>
              {analysis && (
                <Button
                  variant="outline"
                  onClick={handleRetryAnalysis}
                  disabled={isAnalyzing}
                  className="flex items-center gap-2"
                >
                  {isAnalyzing ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    "Regenerate Analysis"
                  )}
                </Button>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {isAnalyzing ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
                <span className="ml-2 text-lg">Generating career analysis...</span>
              </div>
            ) : analysis ? (
              <div className="prose max-w-none">
                <div className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                  {analysis}
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-gray-600 mb-4">Failed to generate analysis.</p>
                <Button onClick={handleRetryAnalysis} disabled={isAnalyzing}>
                  Try Again
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="flex flex-wrap gap-4 justify-center">
          <Button
            onClick={handleStartChat}
            className="flex items-center gap-2 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
            disabled={!analysis}
          >
            <MessageSquare className="h-4 w-4" />
            Chat with AI Counselor
          </Button>
          <Button
            variant="outline"
            onClick={handleDownloadReport}
            className="flex items-center gap-2"
            disabled={!analysis}
          >
            <Download className="h-4 w-4" />
            Download Report
          </Button>
        </div>
      </div>
    </div>
  );
};

export default OpenEndedResults;
